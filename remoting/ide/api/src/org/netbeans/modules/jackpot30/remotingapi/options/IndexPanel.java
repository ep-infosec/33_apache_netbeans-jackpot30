/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.netbeans.modules.jackpot30.remotingapi.options;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import org.netbeans.api.progress.aggregate.AggregateProgressFactory;
import org.netbeans.api.progress.aggregate.AggregateProgressHandle;
import org.netbeans.api.progress.aggregate.ProgressContributor;
import org.netbeans.modules.jackpot30.remoting.api.LocalServer;
import org.netbeans.modules.jackpot30.remoting.api.RemoteIndex;
import org.netbeans.modules.jackpot30.remoting.api.RemoteIndex.UseLocalCache;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.execution.ExecutionEngine;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.windows.InputOutput;

final class IndexPanel extends javax.swing.JPanel {

    private final IndexOptionsPanelController controller;

    IndexPanel(IndexOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        indices.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                enableDisable();
            }
        });
        JComboBox cacheEditor = new JComboBox(UseLocalCache.values());
        indices.setDefaultEditor(UseLocalCache.class, new DefaultCellEditor(cacheEditor));
        enableDisable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        indices = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        synchronizeOffline = new javax.swing.JButton();

        indices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(indices);

        org.openide.awt.Mnemonics.setLocalizedText(addButton, org.openide.util.NbBundle.getMessage(IndexPanel.class, "IndexPanel.addButton.text")); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeButton, org.openide.util.NbBundle.getMessage(IndexPanel.class, "IndexPanel.removeButton.text")); // NOI18N
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(editButton, org.openide.util.NbBundle.getMessage(IndexPanel.class, "IndexPanel.editButton.text")); // NOI18N
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(synchronizeOffline, org.openide.util.NbBundle.getMessage(IndexPanel.class, "IndexPanel.synchronizeOffline.text", new Object[] {})); // NOI18N
        synchronizeOffline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                synchronizeOfflineActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(synchronizeOffline, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(synchronizeOffline)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        addEditIndex(false);
    }//GEN-LAST:event_addButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        addEditIndex(true);
    }//GEN-LAST:event_editButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        TableModelImpl model = (TableModelImpl) indices.getModel();

        model.indices.remove(indices.getSelectedRow());
        model.fireTableDataChanged();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void synchronizeOfflineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_synchronizeOfflineActionPerformed
        ExecutionEngine.getDefault().execute("Synchronizing remote indices", new Runnable() {
            @Override public void run() {
                TableModelImpl model = (TableModelImpl) indices.getModel();
                Collection<RemoteIndex> indices = new ArrayList<RemoteIndex>(model.indices);

                for (Iterator<RemoteIndex> it = indices.iterator(); it.hasNext();) {
                    if (it.next().useLocalCache == UseLocalCache.NEVER) {
                        it.remove();
                    }
                }

                ProgressContributor[] contributors = new ProgressContributor[indices.size()];

                for (int i = 0; i < indices.size(); i++) {
                    contributors[i] = AggregateProgressFactory.createProgressContributor(String.valueOf(i));
                }

                AggregateProgressHandle h = AggregateProgressFactory.createHandle("Synchronizing remote indices", contributors, null, null);

                h.start();

                try {
                    int i = 0;

                    for (RemoteIndex idx : indices) {
                        try {
                            Lookup.getDefault().lookup(LocalServer.class).downloadIndex(idx, contributors[i++]);
                        } catch (IOException ex) {
                            Exceptions.printStackTrace(ex);
                        }
                    }
                } finally {
                    h.finish();
                }
            }
        }, InputOutput.NULL);

    }//GEN-LAST:event_synchronizeOfflineActionPerformed

    private void addEditIndex(boolean edit) {
        JButton okButton = new JButton("OK");
        CustomizeRemoteIndex panel = new CustomizeRemoteIndex(okButton);
        DialogDescriptor dd = new DialogDescriptor(panel, edit ? "Edit Index" : "Add Index", true, new Object[] {okButton, DialogDescriptor.CANCEL_OPTION}, okButton, DialogDescriptor.DEFAULT_ALIGN, null, null);

        dd.setClosingOptions(null);
        panel.setNotificationSupport(dd.createNotificationLineSupport());

        TableModelImpl model = (TableModelImpl) indices.getModel();

        if (edit) {
            panel.setIndex(model.indices.get(indices.getSelectedRow()));
        }

        if (DialogDisplayer.getDefault().notify(dd) == okButton) {
            RemoteIndex remoteIndex = panel.getIndex();

            if (edit) {
                int index = indices.getSelectedRow();

                model.indices.remove(index);
                model.indices.add(index, remoteIndex);
            } else {
                model.indices.add(remoteIndex);
            }

            model.fireTableDataChanged();
        }
    }

    private void enableDisable() {
        if (indices.getSelectedRow() != (-1)) {
            editButton.setEnabled(true);
            removeButton.setEnabled(true);
        } else {
            editButton.setEnabled(false);
            removeButton.setEnabled(false);
        }

        if (indices.getModel() instanceof TableModelImpl) {
            TableModelImpl model = (TableModelImpl) indices.getModel();
            boolean enableDownload = false;

            for (RemoteIndex idx : model.indices) {
                enableDownload |= idx.useLocalCache != UseLocalCache.NEVER;
            }

            synchronizeOffline.setEnabled(enableDownload);
        }
    }

    void load() {
        TableModelImpl model = new TableModelImpl();

        for (RemoteIndex idx : RemoteIndex.loadIndices(true)) {
            model.indices.add(idx);
        }

        indices.setModel(model);
        model.fireTableStructureChanged();
    }

    void store() {
        TableModelImpl model = (TableModelImpl) indices.getModel();
        
        RemoteIndex.saveIndices(model.indices);
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton editButton;
    private javax.swing.JTable indices;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton synchronizeOffline;
    // End of variables declaration//GEN-END:variables

    private static final class TableModelImpl extends AbstractTableModel {

        private final List<RemoteIndex> indices = new ArrayList<RemoteIndex>();

        public int getRowCount() {
            return indices.size();
        }

        public int getColumnCount() {
            return 5;
        }

        public String getColumnName(int columnIndex) {
            switch (columnIndex) {
                case 0: return "";
                case 1: return "Local folder";
                case 2: return "Remote URL";
                case 3: return "Remote project";
                case 4: return "Use local cache";
                default: throw new IllegalStateException();
            }
        }

        public Class<?> getColumnClass(int columnIndex) {
            return columnIndex == 0 ? Boolean.class : columnIndex != 4 ? String.class : UseLocalCache.class;
        }

        public Object getValueAt(int rowIndex, int columnIndex) {
            RemoteIndex idx = indices.get(rowIndex);

            switch (columnIndex) {
                case 0: return idx.enabled;
                case 1:
                    URL localFolder = idx.getLocalFolder();
                    return localFolder != null ? Utils.toDisplayName(localFolder) : "";
                case 2: return idx.remote.toExternalForm();
                case 3: return idx.remoteSegment;
                case 4: return idx.useLocalCache;
                default: throw new IllegalStateException();
            }
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            RemoteIndex idx = indices.get(rowIndex);

            if (columnIndex == 0) {
                idx = RemoteIndex.create(aValue instanceof Boolean ? (Boolean) aValue : true, idx.useLocalCache, idx.getLocalFolder(), idx.remote, idx.remoteSegment);
            } else {
                idx = RemoteIndex.create(idx.enabled, aValue instanceof UseLocalCache ? (UseLocalCache) aValue : UseLocalCache.NEVER, idx.getLocalFolder(), idx.remote, idx.remoteSegment);
            }
            indices.set(rowIndex, idx);
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 0 || columnIndex == 4;
        }

    }
}
